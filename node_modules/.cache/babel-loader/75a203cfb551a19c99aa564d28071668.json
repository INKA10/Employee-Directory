{"ast":null,"code":"import _classCallCheck from \"/Users/andysuarez/Desktop/Bootcamp/Employee-directory-with-redux/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andysuarez/Desktop/Bootcamp/Employee-directory-with-redux/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * Class representing an employee\n */\nexport var Employee =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates an employee\n   * @param {object} data - data from response of ajax call to the RandomAPI\n   */\n  function Employee(data) {\n    _classCallCheck(this, Employee);\n\n    this.uuid = data.login.uuid;\n    this.info = {\n      firstName: this.capitalize(data.name.first),\n      lastName: this.capitalize(data.name.last),\n      name: data.name.first + data.name.last,\n      email: data.email,\n      phone: data.phone,\n      picURL: data.picture.large,\n      city: this.capitalize(data.location.city),\n      // address: `${this.capitalizeEach(data.location.street)}, ${this.capitalize(\n      //   data.location.state\n      // )} ${data.location.postcode}`,\n      birthday: this.formatDate(data.dob.date)\n    };\n  }\n  /**\n   * Formats standard date string to MM/DD/YY format\n   * @param {date} dateStr - date string in standard format\n   */\n\n\n  _createClass(Employee, [{\n    key: \"formatDate\",\n    value: function formatDate(dateStr) {\n      var d = new Date(dateStr);\n      var config = {\n        month: \"2-digit\",\n        day: \"2-digit\",\n        year: \"2-digit\"\n      };\n      return d.toLocaleDateString(\"en-US\", config);\n    }\n    /**\n     * Capitalizes the first letter of a given string\n     * @param {string} str\n     */\n\n  }, {\n    key: \"capitalize\",\n    value: function capitalize(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    /**\n     * Capitalizes the first letters in every word that is separated by space\n     * @param {string} str\n     */\n\n  }, {\n    key: \"capitalizeEach\",\n    value: function capitalizeEach(str) {\n      var _this = this;\n\n      return str.split(\" \").map(function (word) {\n        return _this.capitalize(word);\n      }).join(\" \");\n    }\n  }]);\n\n  return Employee;\n}();","map":{"version":3,"sources":["/Users/andysuarez/Desktop/Bootcamp/Employee-directory-with-redux/src/models/Employee.js"],"names":["Employee","data","uuid","login","info","firstName","capitalize","name","first","lastName","last","email","phone","picURL","picture","large","city","location","birthday","formatDate","dob","date","dateStr","d","Date","config","month","day","year","toLocaleDateString","str","charAt","toUpperCase","slice","split","map","word","join"],"mappings":";;;AAAA;;;AAGA,WAAaA,QAAb;AAAA;AAAA;AACE;;;;AAIA,oBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKC,IAAL,GAAYD,IAAI,CAACE,KAAL,CAAWD,IAAvB;AACA,SAAKE,IAAL,GAAY;AACVC,MAAAA,SAAS,EAAE,KAAKC,UAAL,CAAgBL,IAAI,CAACM,IAAL,CAAUC,KAA1B,CADD;AAEVC,MAAAA,QAAQ,EAAE,KAAKH,UAAL,CAAgBL,IAAI,CAACM,IAAL,CAAUG,IAA1B,CAFA;AAGVH,MAAAA,IAAI,EAAEN,IAAI,CAACM,IAAL,CAAUC,KAAV,GAAkBP,IAAI,CAACM,IAAL,CAAUG,IAHxB;AAIVC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KAJF;AAKVC,MAAAA,KAAK,EAAEX,IAAI,CAACW,KALF;AAMVC,MAAAA,MAAM,EAAEZ,IAAI,CAACa,OAAL,CAAaC,KANX;AAOVC,MAAAA,IAAI,EAAE,KAAKV,UAAL,CAAgBL,IAAI,CAACgB,QAAL,CAAcD,IAA9B,CAPI;AAQV;AACA;AACA;AACAE,MAAAA,QAAQ,EAAE,KAAKC,UAAL,CAAgBlB,IAAI,CAACmB,GAAL,CAASC,IAAzB;AAXA,KAAZ;AAaD;AAED;;;;;;AAtBF;AAAA;AAAA,+BA0BaC,OA1Bb,EA0BsB;AAClB,UAAMC,CAAC,GAAG,IAAIC,IAAJ,CAASF,OAAT,CAAV;AACA,UAAMG,MAAM,GAAG;AACbC,QAAAA,KAAK,EAAE,SADM;AAEbC,QAAAA,GAAG,EAAE,SAFQ;AAGbC,QAAAA,IAAI,EAAE;AAHO,OAAf;AAKA,aAAOL,CAAC,CAACM,kBAAF,CAAqB,OAArB,EAA8BJ,MAA9B,CAAP;AACD;AAED;;;;;AApCF;AAAA;AAAA,+BAwCaK,GAxCb,EAwCkB;AACd,aAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAArC;AACD;AAED;;;;;AA5CF;AAAA;AAAA,mCAgDiBH,GAhDjB,EAgDsB;AAAA;;AAClB,aAAOA,GAAG,CACPI,KADI,CACE,GADF,EAEJC,GAFI,CAEA,UAAAC,IAAI;AAAA,eAAI,KAAI,CAAC9B,UAAL,CAAgB8B,IAAhB,CAAJ;AAAA,OAFJ,EAGJC,IAHI,CAGC,GAHD,CAAP;AAID;AArDH;;AAAA;AAAA","sourcesContent":["/**\n * Class representing an employee\n */\nexport class Employee {\n  /**\n   * Creates an employee\n   * @param {object} data - data from response of ajax call to the RandomAPI\n   */\n  constructor(data) {\n    this.uuid = data.login.uuid;\n    this.info = {\n      firstName: this.capitalize(data.name.first),\n      lastName: this.capitalize(data.name.last),\n      name: data.name.first + data.name.last,\n      email: data.email,\n      phone: data.phone,\n      picURL: data.picture.large,\n      city: this.capitalize(data.location.city),\n      // address: `${this.capitalizeEach(data.location.street)}, ${this.capitalize(\n      //   data.location.state\n      // )} ${data.location.postcode}`,\n      birthday: this.formatDate(data.dob.date)\n    };\n  }\n\n  /**\n   * Formats standard date string to MM/DD/YY format\n   * @param {date} dateStr - date string in standard format\n   */\n  formatDate(dateStr) {\n    const d = new Date(dateStr);\n    const config = {\n      month: \"2-digit\",\n      day: \"2-digit\",\n      year: \"2-digit\"\n    };\n    return d.toLocaleDateString(\"en-US\", config);\n  }\n\n  /**\n   * Capitalizes the first letter of a given string\n   * @param {string} str\n   */\n  capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  /**\n   * Capitalizes the first letters in every word that is separated by space\n   * @param {string} str\n   */\n  capitalizeEach(str) {\n    return str\n      .split(\" \")\n      .map(word => this.capitalize(word))\n      .join(\" \");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}